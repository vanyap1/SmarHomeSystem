
VFD_20x2_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000864  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00000864  000008f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000103  008000c6  008000c6  0000095e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000990  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cdf  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c58  00000000  00000000  0000288b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010a3  00000000  00000000  000034e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000438  00000000  00000000  00004588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f9  00000000  00000000  000049c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000103d  00000000  00000000  000051b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000061f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	af c0       	rjmp	.+350    	; 0x16e <__vector_7>
  10:	a4 c0       	rjmp	.+328    	; 0x15a <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	72 c1       	rjmp	.+740    	; 0x2fc <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	a6 c1       	rjmp	.+844    	; 0x368 <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	fb c0       	rjmp	.+502    	; 0x21a <__vector_17>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e6       	ldi	r30, 0x64	; 100
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 3c       	cpi	r26, 0xC6	; 198
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a6 ec       	ldi	r26, 0xC6	; 198
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 3c       	cpi	r26, 0xC9	; 201
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	bf d2       	rcall	.+1406   	; 0x5d8 <main>
  5a:	02 c4       	rjmp	.+2052   	; 0x860 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <set_pin_level>:
}

void toggle_pin_level(gpio *GPIOx)
{
	uint8_t *tmp_port = GPIOx->port-2;
	*tmp_port = 1 << GPIOx->pin;
  5e:	66 23       	and	r22, r22
  60:	99 f0       	breq	.+38     	; 0x88 <set_pin_level+0x2a>
  62:	dc 01       	movw	r26, r24
  64:	ed 91       	ld	r30, X+
  66:	fc 91       	ld	r31, X
  68:	11 97       	sbiw	r26, 0x01	; 1
  6a:	21 e0       	ldi	r18, 0x01	; 1
  6c:	30 e0       	ldi	r19, 0x00	; 0
  6e:	a9 01       	movw	r20, r18
  70:	12 96       	adiw	r26, 0x02	; 2
  72:	0c 90       	ld	r0, X
  74:	02 c0       	rjmp	.+4      	; 0x7a <set_pin_level+0x1c>
  76:	44 0f       	add	r20, r20
  78:	55 1f       	adc	r21, r21
  7a:	0a 94       	dec	r0
  7c:	e2 f7       	brpl	.-8      	; 0x76 <set_pin_level+0x18>
  7e:	ca 01       	movw	r24, r20
  80:	90 81       	ld	r25, Z
  82:	89 2b       	or	r24, r25
  84:	80 83       	st	Z, r24
  86:	08 95       	ret
  88:	dc 01       	movw	r26, r24
  8a:	ed 91       	ld	r30, X+
  8c:	fc 91       	ld	r31, X
  8e:	11 97       	sbiw	r26, 0x01	; 1
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	a9 01       	movw	r20, r18
  96:	12 96       	adiw	r26, 0x02	; 2
  98:	0c 90       	ld	r0, X
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <set_pin_level+0x42>
  9c:	44 0f       	add	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	0a 94       	dec	r0
  a2:	e2 f7       	brpl	.-8      	; 0x9c <set_pin_level+0x3e>
  a4:	ca 01       	movw	r24, r20
  a6:	80 95       	com	r24
  a8:	90 81       	ld	r25, Z
  aa:	89 23       	and	r24, r25
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <set_pin_dir>:
  b0:	fc 01       	movw	r30, r24
  b2:	30 81       	ld	r19, Z
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	61 30       	cpi	r22, 0x01	; 1
  b8:	99 f0       	breq	.+38     	; 0xe0 <set_pin_dir+0x30>
  ba:	18 f0       	brcs	.+6      	; 0xc2 <set_pin_dir+0x12>
  bc:	62 30       	cpi	r22, 0x02	; 2
  be:	f1 f0       	breq	.+60     	; 0xfc <set_pin_dir+0x4c>
  c0:	08 95       	ret
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 80       	ldd	r0, Z+2	; 0x02
  c8:	02 c0       	rjmp	.+4      	; 0xce <set_pin_dir+0x1e>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <set_pin_dir+0x1a>
  d2:	e3 2f       	mov	r30, r19
  d4:	f2 2f       	mov	r31, r18
  d6:	80 95       	com	r24
  d8:	92 91       	ld	r25, -Z
  da:	89 23       	and	r24, r25
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 80       	ldd	r0, Z+2	; 0x02
  e6:	02 c0       	rjmp	.+4      	; 0xec <set_pin_dir+0x3c>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <set_pin_dir+0x38>
  f0:	e3 2f       	mov	r30, r19
  f2:	f2 2f       	mov	r31, r18
  f4:	92 91       	ld	r25, -Z
  f6:	89 2b       	or	r24, r25
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	ac 01       	movw	r20, r24
 102:	02 80       	ldd	r0, Z+2	; 0x02
 104:	02 c0       	rjmp	.+4      	; 0x10a <set_pin_dir+0x5a>
 106:	44 0f       	add	r20, r20
 108:	55 1f       	adc	r21, r21
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <set_pin_dir+0x56>
 10e:	a3 2f       	mov	r26, r19
 110:	b2 2f       	mov	r27, r18
 112:	40 95       	com	r20
 114:	2e 91       	ld	r18, -X
 116:	42 23       	and	r20, r18
 118:	4c 93       	st	X, r20
 11a:	a0 81       	ld	r26, Z
 11c:	b1 81       	ldd	r27, Z+1	; 0x01
 11e:	02 80       	ldd	r0, Z+2	; 0x02
 120:	02 c0       	rjmp	.+4      	; 0x126 <set_pin_dir+0x76>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <set_pin_dir+0x72>
 12a:	80 95       	com	r24
 12c:	9c 91       	ld	r25, X
 12e:	89 23       	and	r24, r25
 130:	8c 93       	st	X, r24
 132:	08 95       	ret

00000134 <toggle_bit_level>:
}

void toggle_bit_level(gpio *GPIOx)
{
	uint8_t *tmp_port = GPIOx->port;
 134:	dc 01       	movw	r26, r24
 136:	ed 91       	ld	r30, X+
 138:	fc 91       	ld	r31, X
 13a:	11 97       	sbiw	r26, 0x01	; 1
	*tmp_port ^= (1 << GPIOx->pin);
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	a9 01       	movw	r20, r18
 142:	12 96       	adiw	r26, 0x02	; 2
 144:	0c 90       	ld	r0, X
 146:	02 c0       	rjmp	.+4      	; 0x14c <toggle_bit_level+0x18>
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <toggle_bit_level+0x14>
 150:	ca 01       	movw	r24, r20
 152:	90 81       	ld	r25, Z
 154:	89 27       	eor	r24, r25
 156:	80 83       	st	Z, r24
 158:	08 95       	ret

0000015a <__vector_8>:
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_7>:
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <timer1_init>:
 182:	78 94       	sei
 184:	87 b3       	in	r24, 0x17	; 23
 186:	86 60       	ori	r24, 0x06	; 6
 188:	87 bb       	out	0x17, r24	; 23
 18a:	87 e7       	ldi	r24, 0x77	; 119
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	9b bd       	out	0x2b, r25	; 43
 190:	8a bd       	out	0x2a, r24	; 42
 192:	87 e8       	ldi	r24, 0x87	; 135
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	99 bd       	out	0x29, r25	; 41
 198:	88 bd       	out	0x28, r24	; 40
 19a:	8f b5       	in	r24, 0x2f	; 47
 19c:	81 6b       	ori	r24, 0xB1	; 177
 19e:	8f bd       	out	0x2f, r24	; 47
 1a0:	8e b5       	in	r24, 0x2e	; 46
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	8e bd       	out	0x2e, r24	; 46
 1a6:	08 95       	ret

000001a8 <twi_start>:
	data[i] = TWDR;
	
	twi_stop();
	
	return err;
}
 1a8:	85 ea       	ldi	r24, 0xA5	; 165
 1aa:	86 bf       	out	0x36, r24	; 54
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <twi_start+0x14>
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	80 34       	cpi	r24, 0x40	; 64
 1b6:	26 e0       	ldi	r18, 0x06	; 6
 1b8:	92 07       	cpc	r25, r18
 1ba:	30 f4       	brcc	.+12     	; 0x1c8 <twi_start+0x20>
 1bc:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c0:	28 30       	cpi	r18, 0x08	; 8
 1c2:	b9 f7       	brne	.-18     	; 0x1b2 <twi_start+0xa>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret

000001cc <twi_stop>:
 1cc:	85 e9       	ldi	r24, 0x95	; 149
 1ce:	86 bf       	out	0x36, r24	; 54
 1d0:	08 95       	ret

000001d2 <twi_addr_write_ack>:
 1d2:	85 e8       	ldi	r24, 0x85	; 133
 1d4:	86 bf       	out	0x36, r24	; 54
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <twi_addr_write_ack+0x14>
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	80 34       	cpi	r24, 0x40	; 64
 1e0:	26 e0       	ldi	r18, 0x06	; 6
 1e2:	92 07       	cpc	r25, r18
 1e4:	30 f4       	brcc	.+12     	; 0x1f2 <twi_addr_write_ack+0x20>
 1e6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ea:	28 31       	cpi	r18, 0x18	; 24
 1ec:	b9 f7       	brne	.-18     	; 0x1dc <twi_addr_write_ack+0xa>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	08 95       	ret

000001f6 <twi_data_write_ack>:
 1f6:	85 e8       	ldi	r24, 0x85	; 133
 1f8:	86 bf       	out	0x36, r24	; 54
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	80 34       	cpi	r24, 0x40	; 64
 204:	26 e0       	ldi	r18, 0x06	; 6
 206:	92 07       	cpc	r25, r18
 208:	30 f4       	brcc	.+12     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 20a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 20e:	28 32       	cpi	r18, 0x28	; 40
 210:	b9 f7       	brne	.-18     	; 0x200 <__EEPROM_REGION_LENGTH__>
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	08 95       	ret
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	08 95       	ret

0000021a <__vector_17>:
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	8f 93       	push	r24
 226:	81 b1       	in	r24, 0x01	; 1
 228:	88 7f       	andi	r24, 0xF8	; 248
 22a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 22e:	8f 91       	pop	r24
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <twi_write>:


uint8_t twi_write(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
 23a:	cf 92       	push	r12
 23c:	df 92       	push	r13
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	18 2f       	mov	r17, r24
 24a:	06 2f       	mov	r16, r22
 24c:	6a 01       	movw	r12, r20
 24e:	79 01       	movw	r14, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
 250:	ab df       	rcall	.-170    	; 0x1a8 <twi_start>
 252:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
 254:	88 23       	and	r24, r24
 256:	19 f0       	breq	.+6      	; 0x25e <twi_write+0x24>
		twi_stop();
 258:	b9 df       	rcall	.-142    	; 0x1cc <twi_stop>
		return err;
 25a:	8c 2f       	mov	r24, r28
 25c:	27 c0       	rjmp	.+78     	; 0x2ac <twi_write+0x72>
	}
	TWDR = (addr << 1) | 0;
 25e:	11 0f       	add	r17, r17
 260:	13 b9       	out	0x03, r17	; 3
	
	
	err = twi_addr_write_ack();
 262:	b7 df       	rcall	.-146    	; 0x1d2 <twi_addr_write_ack>
 264:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
 266:	88 23       	and	r24, r24
 268:	19 f0       	breq	.+6      	; 0x270 <twi_write+0x36>
		twi_stop();
 26a:	b0 df       	rcall	.-160    	; 0x1cc <twi_stop>
		return err;
 26c:	8c 2f       	mov	r24, r28
 26e:	1e c0       	rjmp	.+60     	; 0x2ac <twi_write+0x72>
	}
	
	TWDR = reg;
 270:	03 b9       	out	0x03, r16	; 3
	err = twi_data_write_ack();
 272:	c1 df       	rcall	.-126    	; 0x1f6 <twi_data_write_ack>
 274:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
 276:	88 23       	and	r24, r24
 278:	91 f0       	breq	.+36     	; 0x29e <twi_write+0x64>
		twi_stop();
 27a:	a8 df       	rcall	.-176    	; 0x1cc <twi_stop>
		return err;
 27c:	8c 2f       	mov	r24, r28
 27e:	16 c0       	rjmp	.+44     	; 0x2ac <twi_write+0x72>
	}
	
	for(i = 0; i < len;i++){
		TWDR = data[i];
 280:	f6 01       	movw	r30, r12
 282:	e0 0f       	add	r30, r16
 284:	f1 1f       	adc	r31, r17
 286:	80 81       	ld	r24, Z
 288:	83 b9       	out	0x03, r24	; 3
		err = twi_data_write_ack();
 28a:	b5 df       	rcall	.-150    	; 0x1f6 <twi_data_write_ack>
 28c:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
 28e:	88 23       	and	r24, r24
 290:	19 f0       	breq	.+6      	; 0x298 <twi_write+0x5e>
			twi_stop();
 292:	9c df       	rcall	.-200    	; 0x1cc <twi_stop>
			return err;
 294:	8c 2f       	mov	r24, r28
 296:	0a c0       	rjmp	.+20     	; 0x2ac <twi_write+0x72>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
 298:	0f 5f       	subi	r16, 0xFF	; 255
 29a:	1f 4f       	sbci	r17, 0xFF	; 255
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <twi_write+0x68>
 29e:	00 e0       	ldi	r16, 0x00	; 0
 2a0:	10 e0       	ldi	r17, 0x00	; 0
 2a2:	0e 15       	cp	r16, r14
 2a4:	1f 05       	cpc	r17, r15
 2a6:	60 f3       	brcs	.-40     	; 0x280 <twi_write+0x46>
			return err;
		}
	}
	
	
	twi_stop();
 2a8:	91 df       	rcall	.-222    	; 0x1cc <twi_stop>
	
	return err;
 2aa:	8c 2f       	mov	r24, r28
}
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	df 90       	pop	r13
 2b8:	cf 90       	pop	r12
 2ba:	08 95       	ret

000002bc <twi_init>:





void twi_init(uint32_t speed){
 2bc:	9b 01       	movw	r18, r22
 2be:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	74 e2       	ldi	r23, 0x24	; 36
 2c4:	84 ef       	ldi	r24, 0xF4	; 244
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	38 d2       	rcall	.+1136   	; 0x73a <__udivmodsi4>
 2ca:	da 01       	movw	r26, r20
 2cc:	c9 01       	movw	r24, r18
 2ce:	40 97       	sbiw	r24, 0x10	; 16
 2d0:	a1 09       	sbc	r26, r1
 2d2:	b1 09       	sbc	r27, r1
 2d4:	b6 95       	lsr	r27
 2d6:	a7 95       	ror	r26
 2d8:	97 95       	ror	r25
 2da:	87 95       	ror	r24
	TWBR = gen_t & 0xFF;
 2dc:	80 b9       	out	0x00, r24	; 0
	TWCR = (1 << TWEN) | (1 << TWIE);
 2de:	85 e0       	ldi	r24, 0x05	; 5
 2e0:	86 bf       	out	0x36, r24	; 54
 2e2:	08 95       	ret

000002e4 <serial_complete>:
	uint8_t data = 0;
	data = rx_buffer[rx_read_pos];
	rx_read_pos++;
	rx_count--;
	return data;
}
 2e4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <read_complete>
 2e8:	08 95       	ret

000002ea <serial_read_data>:
 2ea:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <read_complete>
 2ee:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rx_count+0x1>
 2f2:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <rx_count>
 2f6:	86 ec       	ldi	r24, 0xC6	; 198
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	08 95       	ret

000002fc <__vector_11>:
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
 30e:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <rx_count>
 312:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <rx_count+0x1>
 316:	8c b1       	in	r24, 0x0c	; 12
 318:	ea 53       	subi	r30, 0x3A	; 58
 31a:	ff 4f       	sbci	r31, 0xFF	; 255
 31c:	80 83       	st	Z, r24
 31e:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <rx_count>
 322:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <rx_count+0x1>
 326:	ea 53       	subi	r30, 0x3A	; 58
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	80 81       	ld	r24, Z
 32c:	8d 30       	cpi	r24, 0x0D	; 13
 32e:	51 f4       	brne	.+20     	; 0x344 <__vector_11+0x48>
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <read_complete>
 336:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <rx_count>
 33a:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <rx_count+0x1>
 33e:	e9 53       	subi	r30, 0x39	; 57
 340:	ff 4f       	sbci	r31, 0xFF	; 255
 342:	10 82       	st	Z, r1
 344:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <rx_count>
 348:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <rx_count+0x1>
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <rx_count+0x1>
 352:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <rx_count>
 356:	ff 91       	pop	r31
 358:	ef 91       	pop	r30
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__vector_13>:
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	8f 93       	push	r24
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <uart_tx_busy>
 37a:	8f 91       	pop	r24
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <uart_init>:
 386:	44 23       	and	r20, r20
 388:	29 f0       	breq	.+10     	; 0x394 <uart_init+0xe>
 38a:	2b b1       	in	r18, 0x0b	; 11
 38c:	22 60       	ori	r18, 0x02	; 2
 38e:	2b b9       	out	0x0b, r18	; 11
 390:	a8 e0       	ldi	r26, 0x08	; 8
 392:	01 c0       	rjmp	.+2      	; 0x396 <uart_init+0x10>
 394:	a0 e1       	ldi	r26, 0x10	; 16
 396:	b0 e0       	ldi	r27, 0x00	; 0
 398:	9b 01       	movw	r18, r22
 39a:	ac 01       	movw	r20, r24
 39c:	f0 d1       	rcall	.+992    	; 0x77e <__muluhisi3>
 39e:	9b 01       	movw	r18, r22
 3a0:	ac 01       	movw	r20, r24
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	74 e2       	ldi	r23, 0x24	; 36
 3a6:	84 ef       	ldi	r24, 0xF4	; 244
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	c7 d1       	rcall	.+910    	; 0x73a <__udivmodsi4>
 3ac:	ba 01       	movw	r22, r20
 3ae:	a9 01       	movw	r20, r18
 3b0:	41 50       	subi	r20, 0x01	; 1
 3b2:	51 09       	sbc	r21, r1
 3b4:	61 09       	sbc	r22, r1
 3b6:	71 09       	sbc	r23, r1
 3b8:	db 01       	movw	r26, r22
 3ba:	ca 01       	movw	r24, r20
 3bc:	88 27       	eor	r24, r24
 3be:	9f 70       	andi	r25, 0x0F	; 15
 3c0:	aa 27       	eor	r26, r26
 3c2:	bb 27       	eor	r27, r27
 3c4:	89 2f       	mov	r24, r25
 3c6:	9a 2f       	mov	r25, r26
 3c8:	ab 2f       	mov	r26, r27
 3ca:	bb 27       	eor	r27, r27
 3cc:	80 bd       	out	0x20, r24	; 32
 3ce:	49 b9       	out	0x09, r20	; 9
 3d0:	8a b1       	in	r24, 0x0a	; 10
 3d2:	88 6d       	ori	r24, 0xD8	; 216
 3d4:	8a b9       	out	0x0a, r24	; 10
 3d6:	86 e8       	ldi	r24, 0x86	; 134
 3d8:	80 bd       	out	0x20, r24	; 32
 3da:	08 95       	ret

000003dc <parseString>:


void parseString(const char* input, display* output) {
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <parseString+0xa>
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
 3ea:	8b 01       	movw	r16, r22
	char* token;
	char* rest = (char*)input;
 3ec:	9a 83       	std	Y+2, r25	; 0x02
 3ee:	89 83       	std	Y+1, r24	; 0x01

	
	token = strtok_r(rest, "/", &rest);
 3f0:	ae 01       	movw	r20, r28
 3f2:	4f 5f       	subi	r20, 0xFF	; 255
 3f4:	5f 4f       	sbci	r21, 0xFF	; 255
 3f6:	63 ec       	ldi	r22, 0xC3	; 195
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	03 d2       	rcall	.+1030   	; 0x802 <strtok_r>
	if (token) {
 3fc:	00 97       	sbiw	r24, 0x00	; 0
 3fe:	39 f0       	breq	.+14     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
		strncpy(output->first_line, token, sizeof(output->first_line) - 1);
 400:	4f e1       	ldi	r20, 0x1F	; 31
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	bc 01       	movw	r22, r24
 406:	c8 01       	movw	r24, r16
 408:	ed d1       	rcall	.+986    	; 0x7e4 <strncpy>
		output->first_line[sizeof(output->first_line) - 1] = '\0';
 40a:	f8 01       	movw	r30, r16
 40c:	17 8e       	std	Z+31, r1	; 0x1f
	}

	token = strtok_r(rest, "/", &rest);
 40e:	ae 01       	movw	r20, r28
 410:	4f 5f       	subi	r20, 0xFF	; 255
 412:	5f 4f       	sbci	r21, 0xFF	; 255
 414:	63 ec       	ldi	r22, 0xC3	; 195
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	9a 81       	ldd	r25, Y+2	; 0x02
 41c:	f2 d1       	rcall	.+996    	; 0x802 <strtok_r>
	if (token) {
 41e:	00 97       	sbiw	r24, 0x00	; 0
 420:	41 f0       	breq	.+16     	; 0x432 <__DATA_REGION_LENGTH__+0x32>
		strncpy(output->second_line, token, sizeof(output->second_line) - 1);
 422:	4f e1       	ldi	r20, 0x1F	; 31
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	bc 01       	movw	r22, r24
 428:	c8 01       	movw	r24, r16
 42a:	80 96       	adiw	r24, 0x20	; 32
 42c:	db d1       	rcall	.+950    	; 0x7e4 <strncpy>
		output->second_line[sizeof(output->second_line) - 1] = '\0';
 42e:	f8 01       	movw	r30, r16
 430:	17 ae       	std	Z+63, r1	; 0x3f
	}

	token = strtok_r(rest, "/", &rest);
 432:	ae 01       	movw	r20, r28
 434:	4f 5f       	subi	r20, 0xFF	; 255
 436:	5f 4f       	sbci	r21, 0xFF	; 255
 438:	63 ec       	ldi	r22, 0xC3	; 195
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	9a 81       	ldd	r25, Y+2	; 0x02
 440:	e0 d1       	rcall	.+960    	; 0x802 <strtok_r>
	if (token) {
 442:	00 97       	sbiw	r24, 0x00	; 0
 444:	29 f0       	breq	.+10     	; 0x450 <__DATA_REGION_LENGTH__+0x50>
		output->ld_red = (uint8_t)atoi(token);
 446:	b1 d1       	rcall	.+866    	; 0x7aa <atoi>
 448:	f8 01       	movw	r30, r16
 44a:	e0 5c       	subi	r30, 0xC0	; 192
 44c:	ff 4f       	sbci	r31, 0xFF	; 255
 44e:	80 83       	st	Z, r24
	}

	token = strtok_r(rest, "/", &rest);
 450:	ae 01       	movw	r20, r28
 452:	4f 5f       	subi	r20, 0xFF	; 255
 454:	5f 4f       	sbci	r21, 0xFF	; 255
 456:	63 ec       	ldi	r22, 0xC3	; 195
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	9a 81       	ldd	r25, Y+2	; 0x02
 45e:	d1 d1       	rcall	.+930    	; 0x802 <strtok_r>
	if (token) {
 460:	00 97       	sbiw	r24, 0x00	; 0
 462:	29 f0       	breq	.+10     	; 0x46e <__stack+0xf>
		output->ld_green = (uint8_t)atoi(token);
 464:	a2 d1       	rcall	.+836    	; 0x7aa <atoi>
 466:	f8 01       	movw	r30, r16
 468:	ef 5b       	subi	r30, 0xBF	; 191
 46a:	ff 4f       	sbci	r31, 0xFF	; 255
 46c:	80 83       	st	Z, r24
	}

	token = strtok_r(rest, "/", &rest);
 46e:	ae 01       	movw	r20, r28
 470:	4f 5f       	subi	r20, 0xFF	; 255
 472:	5f 4f       	sbci	r21, 0xFF	; 255
 474:	63 ec       	ldi	r22, 0xC3	; 195
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	9a 81       	ldd	r25, Y+2	; 0x02
 47c:	c2 d1       	rcall	.+900    	; 0x802 <strtok_r>
	if (token) {
 47e:	00 97       	sbiw	r24, 0x00	; 0
 480:	29 f0       	breq	.+10     	; 0x48c <__stack+0x2d>
		output->ld_orange = (uint8_t)atoi(token);
 482:	93 d1       	rcall	.+806    	; 0x7aa <atoi>
 484:	f8 01       	movw	r30, r16
 486:	ee 5b       	subi	r30, 0xBE	; 190
 488:	ff 4f       	sbci	r31, 0xFF	; 255
 48a:	80 83       	st	Z, r24
	}
 48c:	0f 90       	pop	r0
 48e:	0f 90       	pop	r0
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	08 95       	ret

0000049a <spiwrite>:


void spiwrite(uint8_t c)
{
	unsigned char n;
	for(n=8; n>0; n--)
 49a:	98 e0       	ldi	r25, 0x08	; 8
 49c:	1d c0       	rjmp	.+58     	; 0x4d8 <spiwrite+0x3e>
	{
		CLK_LO;;              //SCL = low
 49e:	28 b3       	in	r18, 0x18	; 24
 4a0:	2f 7d       	andi	r18, 0xDF	; 223
 4a2:	28 bb       	out	0x18, r18	; 24
		if(c &(1<<(n-1))){DAT_HI;}
 4a4:	49 2f       	mov	r20, r25
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	41 50       	subi	r20, 0x01	; 1
 4aa:	51 09       	sbc	r21, r1
 4ac:	28 2f       	mov	r18, r24
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <spiwrite+0x1c>
 4b2:	35 95       	asr	r19
 4b4:	27 95       	ror	r18
 4b6:	4a 95       	dec	r20
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <spiwrite+0x18>
 4ba:	20 ff       	sbrs	r18, 0
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <spiwrite+0x2c>
 4be:	28 b3       	in	r18, 0x18	; 24
 4c0:	28 60       	ori	r18, 0x08	; 8
 4c2:	28 bb       	out	0x18, r18	; 24
 4c4:	03 c0       	rjmp	.+6      	; 0x4cc <spiwrite+0x32>
		else{ DAT_LO;}
 4c6:	28 b3       	in	r18, 0x18	; 24
 4c8:	27 7f       	andi	r18, 0xF7	; 247
 4ca:	28 bb       	out	0x18, r18	; 24
		nop();
 4cc:	00 00       	nop
		CLK_HI;               //SCL rising edge trigger
 4ce:	28 b3       	in	r18, 0x18	; 24
 4d0:	20 62       	ori	r18, 0x20	; 32
 4d2:	28 bb       	out	0x18, r18	; 24
		nop();
 4d4:	00 00       	nop


void spiwrite(uint8_t c)
{
	unsigned char n;
	for(n=8; n>0; n--)
 4d6:	91 50       	subi	r25, 0x01	; 1
 4d8:	91 11       	cpse	r25, r1
 4da:	e1 cf       	rjmp	.-62     	; 0x49e <spiwrite+0x4>
		else{ DAT_LO;}
		nop();
		CLK_HI;               //SCL rising edge trigger
		nop();
	}
}
 4dc:	08 95       	ret

000004de <vfd_command>:

void vfd_command(uint8_t c)
{
 4de:	cf 93       	push	r28
 4e0:	c8 2f       	mov	r28, r24
	STB_HI
 4e2:	88 b3       	in	r24, 0x18	; 24
 4e4:	81 60       	ori	r24, 0x01	; 1
 4e6:	88 bb       	out	0x18, r24	; 24
	nop();
 4e8:	00 00       	nop
	STB_LO
 4ea:	88 b3       	in	r24, 0x18	; 24
 4ec:	8e 7f       	andi	r24, 0xFE	; 254
 4ee:	88 bb       	out	0x18, r24	; 24
	spiwrite(0xf8);
 4f0:	88 ef       	ldi	r24, 0xF8	; 248
 4f2:	d3 df       	rcall	.-90     	; 0x49a <spiwrite>
	spiwrite(c);
 4f4:	8c 2f       	mov	r24, r28
 4f6:	d1 df       	rcall	.-94     	; 0x49a <spiwrite>
	STB_HI
 4f8:	88 b3       	in	r24, 0x18	; 24
 4fa:	81 60       	ori	r24, 0x01	; 1
 4fc:	88 bb       	out	0x18, r24	; 24
	nop();
 4fe:	00 00       	nop
	STB_LO
 500:	88 b3       	in	r24, 0x18	; 24
 502:	8e 7f       	andi	r24, 0xFE	; 254
 504:	88 bb       	out	0x18, r24	; 24
}
 506:	cf 91       	pop	r28
 508:	08 95       	ret

0000050a <vfd_data>:

void vfd_data(uint8_t c)
{
 50a:	cf 93       	push	r28
 50c:	c8 2f       	mov	r28, r24
	STB_HI
 50e:	88 b3       	in	r24, 0x18	; 24
 510:	81 60       	ori	r24, 0x01	; 1
 512:	88 bb       	out	0x18, r24	; 24
	nop();
 514:	00 00       	nop
	STB_LO
 516:	88 b3       	in	r24, 0x18	; 24
 518:	8e 7f       	andi	r24, 0xFE	; 254
 51a:	88 bb       	out	0x18, r24	; 24
	spiwrite(0xfa);
 51c:	8a ef       	ldi	r24, 0xFA	; 250
 51e:	bd df       	rcall	.-134    	; 0x49a <spiwrite>
	//_delay_us(1);
	spiwrite(c);
 520:	8c 2f       	mov	r24, r28
 522:	bb df       	rcall	.-138    	; 0x49a <spiwrite>
	STB_HI
 524:	88 b3       	in	r24, 0x18	; 24
 526:	81 60       	ori	r24, 0x01	; 1
 528:	88 bb       	out	0x18, r24	; 24
	nop();
 52a:	00 00       	nop
	STB_LO
 52c:	88 b3       	in	r24, 0x18	; 24
 52e:	8e 7f       	andi	r24, 0xFE	; 254
 530:	88 bb       	out	0x18, r24	; 24
}
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <vfd_init>:


void vfd_init()
{
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
	RST_LO
 53a:	85 b3       	in	r24, 0x15	; 21
 53c:	8e 7f       	andi	r24, 0xFE	; 254
 53e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 540:	8f e3       	ldi	r24, 0x3F	; 63
 542:	9c e9       	ldi	r25, 0x9C	; 156
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <vfd_init+0xe>
 548:	00 c0       	rjmp	.+0      	; 0x54a <vfd_init+0x14>
 54a:	00 00       	nop
	_delay_ms(10);
	RST_HI
 54c:	85 b3       	in	r24, 0x15	; 21
 54e:	81 60       	ori	r24, 0x01	; 1
 550:	85 bb       	out	0x15, r24	; 21
	CS_LO
 552:	85 b3       	in	r24, 0x15	; 21
 554:	8d 7f       	andi	r24, 0xFD	; 253
 556:	85 bb       	out	0x15, r24	; 21
	vfd_command(0b00111000);
 558:	88 e3       	ldi	r24, 0x38	; 56
 55a:	c1 df       	rcall	.-126    	; 0x4de <vfd_command>
	vfd_command(0b00000001);
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	bf df       	rcall	.-130    	; 0x4de <vfd_command>
	vfd_data(0b0);
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	d3 df       	rcall	.-90     	; 0x50a <vfd_data>
	vfd_command(0b00001100);
 564:	8c e0       	ldi	r24, 0x0C	; 12
 566:	bb df       	rcall	.-138    	; 0x4de <vfd_command>
	vfd_command(0b10000000);
 568:	80 e8       	ldi	r24, 0x80	; 128
 56a:	b9 df       	rcall	.-142    	; 0x4de <vfd_command>
	int i;
	for (i = 0; i < 64; i++) {
 56c:	c0 e0       	ldi	r28, 0x00	; 0
 56e:	d0 e0       	ldi	r29, 0x00	; 0
 570:	03 c0       	rjmp	.+6      	; 0x578 <vfd_init+0x42>
		vfd_data(0xff);
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	ca df       	rcall	.-108    	; 0x50a <vfd_data>
	vfd_command(0b00000001);
	vfd_data(0b0);
	vfd_command(0b00001100);
	vfd_command(0b10000000);
	int i;
	for (i = 0; i < 64; i++) {
 576:	21 96       	adiw	r28, 0x01	; 1
 578:	c0 34       	cpi	r28, 0x40	; 64
 57a:	d1 05       	cpc	r29, r1
 57c:	d4 f3       	brlt	.-12     	; 0x572 <vfd_init+0x3c>
		vfd_data(0xff);
	}
	vfd_command(0b00000001);
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	ae df       	rcall	.-164    	; 0x4de <vfd_command>
	CS_HI
 582:	85 b3       	in	r24, 0x15	; 21
 584:	82 60       	ori	r24, 0x02	; 2
 586:	85 bb       	out	0x15, r24	; 21
}
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <vfd_set_cursor>:

void vfd_set_cursor(uint8_t line, uint8_t position){
	if(line==2){position += 0x40;}
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	09 f4       	brne	.+2      	; 0x594 <vfd_set_cursor+0x6>
 592:	60 5c       	subi	r22, 0xC0	; 192
	CS_LO
 594:	85 b3       	in	r24, 0x15	; 21
 596:	8d 7f       	andi	r24, 0xFD	; 253
 598:	85 bb       	out	0x15, r24	; 21
	vfd_command(0b10000000 | position);
 59a:	86 2f       	mov	r24, r22
 59c:	80 68       	ori	r24, 0x80	; 128
 59e:	9f df       	rcall	.-194    	; 0x4de <vfd_command>
	CS_HI
 5a0:	85 b3       	in	r24, 0x15	; 21
 5a2:	82 60       	ori	r24, 0x02	; 2
 5a4:	85 bb       	out	0x15, r24	; 21
 5a6:	08 95       	ret

000005a8 <vfd_string>:
}


void vfd_string(uint8_t *c){
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	8c 01       	movw	r16, r24
	uint16_t i = 0;
 5b2:	c0 e0       	ldi	r28, 0x00	; 0
 5b4:	d0 e0       	ldi	r29, 0x00	; 0
	do{
		vfd_data(c[i]);
 5b6:	f8 01       	movw	r30, r16
 5b8:	ec 0f       	add	r30, r28
 5ba:	fd 1f       	adc	r31, r29
 5bc:	80 81       	ld	r24, Z
 5be:	a5 df       	rcall	.-182    	; 0x50a <vfd_data>
		i++;
 5c0:	21 96       	adiw	r28, 0x01	; 1
		
	}while(c[i] != '\0');
 5c2:	f8 01       	movw	r30, r16
 5c4:	ec 0f       	add	r30, r28
 5c6:	fd 1f       	adc	r31, r29
 5c8:	80 81       	ld	r24, Z
 5ca:	81 11       	cpse	r24, r1
 5cc:	f4 cf       	rjmp	.-24     	; 0x5b6 <vfd_string+0xe>
	//uart_send_byte(c[i]);
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	08 95       	ret

000005d8 <main>:

int main(void)
{
   
   
   sei();
 5d8:	78 94       	sei
   uart_init(38400,0);
 5da:	40 e0       	ldi	r20, 0x00	; 0
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	76 e9       	ldi	r23, 0x96	; 150
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	d0 de       	rcall	.-608    	; 0x386 <uart_init>
   twi_init(400000);
 5e6:	60 e8       	ldi	r22, 0x80	; 128
 5e8:	7a e1       	ldi	r23, 0x1A	; 26
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	66 de       	rcall	.-820    	; 0x2bc <twi_init>
   //char char_array[128]="\0";
   
   //DDRC = 255;
   set_pin_dir(&vfd_reset , PORT_DIR_OUT);	set_pin_level(&vfd_reset , false);
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	8e eb       	ldi	r24, 0xBE	; 190
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	5c dd       	rcall	.-1352   	; 0xb0 <set_pin_dir>
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	8e eb       	ldi	r24, 0xBE	; 190
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	2f dd       	rcall	.-1442   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_cs , PORT_DIR_OUT);		set_pin_level(&vfd_cs , true);
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	8b eb       	ldi	r24, 0xBB	; 187
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	54 dd       	rcall	.-1368   	; 0xb0 <set_pin_dir>
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	8b eb       	ldi	r24, 0xBB	; 187
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	27 dd       	rcall	.-1458   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_stb , PORT_DIR_OUT);	set_pin_level(&vfd_stb , false);
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	88 eb       	ldi	r24, 0xB8	; 184
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	4c dd       	rcall	.-1384   	; 0xb0 <set_pin_dir>
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	88 eb       	ldi	r24, 0xB8	; 184
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	1f dd       	rcall	.-1474   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_mosi , PORT_DIR_OUT);	set_pin_level(&vfd_mosi , false);
 620:	61 e0       	ldi	r22, 0x01	; 1
 622:	85 eb       	ldi	r24, 0xB5	; 181
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	44 dd       	rcall	.-1400   	; 0xb0 <set_pin_dir>
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	85 eb       	ldi	r24, 0xB5	; 181
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	17 dd       	rcall	.-1490   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_clk , PORT_DIR_OUT);	set_pin_level(&vfd_clk , true);
 630:	61 e0       	ldi	r22, 0x01	; 1
 632:	82 eb       	ldi	r24, 0xB2	; 178
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	3c dd       	rcall	.-1416   	; 0xb0 <set_pin_dir>
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	82 eb       	ldi	r24, 0xB2	; 178
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0f dd       	rcall	.-1506   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_40v , PORT_DIR_OUT);	set_pin_level(&vfd_40v , true);
 640:	61 e0       	ldi	r22, 0x01	; 1
 642:	8f ea       	ldi	r24, 0xAF	; 175
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	34 dd       	rcall	.-1432   	; 0xb0 <set_pin_dir>
 648:	61 e0       	ldi	r22, 0x01	; 1
 64a:	8f ea       	ldi	r24, 0xAF	; 175
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	07 dd       	rcall	.-1522   	; 0x5e <set_pin_level>
 650:	2f ef       	ldi	r18, 0xFF	; 255
 652:	89 e6       	ldi	r24, 0x69	; 105
 654:	98 e1       	ldi	r25, 0x18	; 24
 656:	21 50       	subi	r18, 0x01	; 1
 658:	80 40       	sbci	r24, 0x00	; 0
 65a:	90 40       	sbci	r25, 0x00	; 0
 65c:	e1 f7       	brne	.-8      	; 0x656 <main+0x7e>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <main+0x88>
 660:	00 00       	nop
   _delay_ms(500);
   timer1_init(0);
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	8d dd       	rcall	.-1254   	; 0x182 <timer1_init>
   uint8_t blink_divider = 0;
   
   
   
   
   vfd_init();
 668:	66 df       	rcall	.-308    	; 0x536 <vfd_init>




int main(void)
{
 66a:	c0 e0       	ldi	r28, 0x00	; 0
   while (1) 
   {



	if (serial_complete()){
 66c:	3b de       	rcall	.-906    	; 0x2e4 <serial_complete>
 66e:	88 23       	and	r24, r24
 670:	21 f0       	breq	.+8      	; 0x67a <main+0xa2>
		const char *data_p = serial_read_data();
 672:	3b de       	rcall	.-906    	; 0x2ea <serial_read_data>
		parseString(data_p, &vfd);
 674:	63 e6       	ldi	r22, 0x63	; 99
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	b1 de       	rcall	.-670    	; 0x3dc <parseString>
 67a:	2f e7       	ldi	r18, 0x7F	; 127
 67c:	88 e3       	ldi	r24, 0x38	; 56
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	21 50       	subi	r18, 0x01	; 1
 682:	80 40       	sbci	r24, 0x00	; 0
 684:	90 40       	sbci	r25, 0x00	; 0
 686:	e1 f7       	brne	.-8      	; 0x680 <main+0xa8>
 688:	00 c0       	rjmp	.+0      	; 0x68a <main+0xb2>
 68a:	00 00       	nop




	_delay_ms(25);
	blink_divider++;
 68c:	cf 5f       	subi	r28, 0xFF	; 255
	if (blink_divider >= 15){
 68e:	cf 30       	cpi	r28, 0x0F	; 15
 690:	68 f3       	brcs	.-38     	; 0x66c <main+0x94>
		blink_divider = 0;
		vfd_set_cursor(1,0);
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	7b df       	rcall	.-266    	; 0x58e <vfd_set_cursor>
		vfd_string((uint8_t *)vfd.first_line);
 698:	83 e6       	ldi	r24, 0x63	; 99
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	85 df       	rcall	.-246    	; 0x5a8 <vfd_string>
		vfd_set_cursor(2,0);
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	75 df       	rcall	.-278    	; 0x58e <vfd_set_cursor>
		vfd_string((uint8_t *)vfd.second_line);
 6a4:	83 e8       	ldi	r24, 0x83	; 131
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	7f df       	rcall	.-258    	; 0x5a8 <vfd_string>
		//sprintf(char_array, "%d; ", led_port);			
		//vfd_set_cursor(1,0);
		//vfd_string((uint8_t *)char_array);
		    switch (vfd.ld_orange) {
 6aa:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <vfd+0x42>
 6ae:	81 30       	cpi	r24, 0x01	; 1
 6b0:	19 f0       	breq	.+6      	; 0x6b8 <main+0xe0>
 6b2:	82 30       	cpi	r24, 0x02	; 2
 6b4:	31 f0       	breq	.+12     	; 0x6c2 <main+0xea>
 6b6:	09 c0       	rjmp	.+18     	; 0x6ca <main+0xf2>
			    case 1:
			    set_pin_level(&orange_led, false);
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	86 ea       	ldi	r24, 0xA6	; 166
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	cf dc       	rcall	.-1634   	; 0x5e <set_pin_level>
			    break;
 6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <main+0xfa>
			    case 2:
			    toggle_bit_level(&orange_led);
 6c2:	86 ea       	ldi	r24, 0xA6	; 166
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	36 dd       	rcall	.-1428   	; 0x134 <toggle_bit_level>
			    break;
 6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <main+0xfa>
			    default:
			    set_pin_level(&orange_led, true);
 6ca:	61 e0       	ldi	r22, 0x01	; 1
 6cc:	86 ea       	ldi	r24, 0xA6	; 166
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	c6 dc       	rcall	.-1652   	; 0x5e <set_pin_level>
			    break;
		    }
			 switch (vfd.ld_green) {
 6d2:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <vfd+0x41>
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	19 f0       	breq	.+6      	; 0x6e0 <main+0x108>
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	31 f0       	breq	.+12     	; 0x6ea <main+0x112>
 6de:	09 c0       	rjmp	.+18     	; 0x6f2 <main+0x11a>
				 case 1:
				 set_pin_level(&grn_led, false);
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	8c ea       	ldi	r24, 0xAC	; 172
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	bb dc       	rcall	.-1674   	; 0x5e <set_pin_level>
				 break;
 6e8:	08 c0       	rjmp	.+16     	; 0x6fa <main+0x122>
				 case 2:
				 toggle_bit_level(&grn_led);
 6ea:	8c ea       	ldi	r24, 0xAC	; 172
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	22 dd       	rcall	.-1468   	; 0x134 <toggle_bit_level>
				 break;
 6f0:	04 c0       	rjmp	.+8      	; 0x6fa <main+0x122>
				 default:
				 set_pin_level(&grn_led, true);
 6f2:	61 e0       	ldi	r22, 0x01	; 1
 6f4:	8c ea       	ldi	r24, 0xAC	; 172
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	b2 dc       	rcall	.-1692   	; 0x5e <set_pin_level>
				 break;
			 }
			 switch (vfd.ld_red) {
 6fa:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <vfd+0x40>
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	19 f0       	breq	.+6      	; 0x708 <main+0x130>
 702:	82 30       	cpi	r24, 0x02	; 2
 704:	31 f0       	breq	.+12     	; 0x712 <main+0x13a>
 706:	09 c0       	rjmp	.+18     	; 0x71a <main+0x142>
				 case 1:
				 set_pin_level(&red_led, false);
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	89 ea       	ldi	r24, 0xA9	; 169
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	a7 dc       	rcall	.-1714   	; 0x5e <set_pin_level>
				 break;
 710:	08 c0       	rjmp	.+16     	; 0x722 <main+0x14a>
				 case 2:
				 toggle_bit_level(&red_led);
 712:	89 ea       	ldi	r24, 0xA9	; 169
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e dd       	rcall	.-1508   	; 0x134 <toggle_bit_level>
				 break;
 718:	04 c0       	rjmp	.+8      	; 0x722 <main+0x14a>
				 default:
				 set_pin_level(&red_led, true);
 71a:	61 e0       	ldi	r22, 0x01	; 1
 71c:	89 ea       	ldi	r24, 0xA9	; 169
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	9e dc       	rcall	.-1732   	; 0x5e <set_pin_level>
				 break;
			 }
		
		expander_data[0] = led_port;
 722:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <led_port>
 726:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <expander_data>
		twi_write(EXPANDER_ADDR , EXPANDER_REG, expander_data, sizeof(expander_data));
 72a:	22 e0       	ldi	r18, 0x02	; 2
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	41 ec       	ldi	r20, 0xC1	; 193
 730:	50 e0       	ldi	r21, 0x00	; 0
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	82 e2       	ldi	r24, 0x22	; 34
 736:	81 dd       	rcall	.-1278   	; 0x23a <twi_write>
 738:	98 cf       	rjmp	.-208    	; 0x66a <main+0x92>

0000073a <__udivmodsi4>:
 73a:	a1 e2       	ldi	r26, 0x21	; 33
 73c:	1a 2e       	mov	r1, r26
 73e:	aa 1b       	sub	r26, r26
 740:	bb 1b       	sub	r27, r27
 742:	fd 01       	movw	r30, r26
 744:	0d c0       	rjmp	.+26     	; 0x760 <__udivmodsi4_ep>

00000746 <__udivmodsi4_loop>:
 746:	aa 1f       	adc	r26, r26
 748:	bb 1f       	adc	r27, r27
 74a:	ee 1f       	adc	r30, r30
 74c:	ff 1f       	adc	r31, r31
 74e:	a2 17       	cp	r26, r18
 750:	b3 07       	cpc	r27, r19
 752:	e4 07       	cpc	r30, r20
 754:	f5 07       	cpc	r31, r21
 756:	20 f0       	brcs	.+8      	; 0x760 <__udivmodsi4_ep>
 758:	a2 1b       	sub	r26, r18
 75a:	b3 0b       	sbc	r27, r19
 75c:	e4 0b       	sbc	r30, r20
 75e:	f5 0b       	sbc	r31, r21

00000760 <__udivmodsi4_ep>:
 760:	66 1f       	adc	r22, r22
 762:	77 1f       	adc	r23, r23
 764:	88 1f       	adc	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	1a 94       	dec	r1
 76a:	69 f7       	brne	.-38     	; 0x746 <__udivmodsi4_loop>
 76c:	60 95       	com	r22
 76e:	70 95       	com	r23
 770:	80 95       	com	r24
 772:	90 95       	com	r25
 774:	9b 01       	movw	r18, r22
 776:	ac 01       	movw	r20, r24
 778:	bd 01       	movw	r22, r26
 77a:	cf 01       	movw	r24, r30
 77c:	08 95       	ret

0000077e <__muluhisi3>:
 77e:	09 d0       	rcall	.+18     	; 0x792 <__umulhisi3>
 780:	a5 9f       	mul	r26, r21
 782:	90 0d       	add	r25, r0
 784:	b4 9f       	mul	r27, r20
 786:	90 0d       	add	r25, r0
 788:	a4 9f       	mul	r26, r20
 78a:	80 0d       	add	r24, r0
 78c:	91 1d       	adc	r25, r1
 78e:	11 24       	eor	r1, r1
 790:	08 95       	ret

00000792 <__umulhisi3>:
 792:	a2 9f       	mul	r26, r18
 794:	b0 01       	movw	r22, r0
 796:	b3 9f       	mul	r27, r19
 798:	c0 01       	movw	r24, r0
 79a:	a3 9f       	mul	r26, r19
 79c:	01 d0       	rcall	.+2      	; 0x7a0 <__umulhisi3+0xe>
 79e:	b2 9f       	mul	r27, r18
 7a0:	70 0d       	add	r23, r0
 7a2:	81 1d       	adc	r24, r1
 7a4:	11 24       	eor	r1, r1
 7a6:	91 1d       	adc	r25, r1
 7a8:	08 95       	ret

000007aa <atoi>:
 7aa:	fc 01       	movw	r30, r24
 7ac:	88 27       	eor	r24, r24
 7ae:	99 27       	eor	r25, r25
 7b0:	e8 94       	clt
 7b2:	21 91       	ld	r18, Z+
 7b4:	20 32       	cpi	r18, 0x20	; 32
 7b6:	e9 f3       	breq	.-6      	; 0x7b2 <atoi+0x8>
 7b8:	29 30       	cpi	r18, 0x09	; 9
 7ba:	10 f0       	brcs	.+4      	; 0x7c0 <atoi+0x16>
 7bc:	2e 30       	cpi	r18, 0x0E	; 14
 7be:	c8 f3       	brcs	.-14     	; 0x7b2 <atoi+0x8>
 7c0:	2b 32       	cpi	r18, 0x2B	; 43
 7c2:	39 f0       	breq	.+14     	; 0x7d2 <atoi+0x28>
 7c4:	2d 32       	cpi	r18, 0x2D	; 45
 7c6:	31 f4       	brne	.+12     	; 0x7d4 <atoi+0x2a>
 7c8:	68 94       	set
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <atoi+0x28>
 7cc:	41 d0       	rcall	.+130    	; 0x850 <__mulhi_const_10>
 7ce:	82 0f       	add	r24, r18
 7d0:	91 1d       	adc	r25, r1
 7d2:	21 91       	ld	r18, Z+
 7d4:	20 53       	subi	r18, 0x30	; 48
 7d6:	2a 30       	cpi	r18, 0x0A	; 10
 7d8:	c8 f3       	brcs	.-14     	; 0x7cc <atoi+0x22>
 7da:	1e f4       	brtc	.+6      	; 0x7e2 <atoi+0x38>
 7dc:	90 95       	com	r25
 7de:	81 95       	neg	r24
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	08 95       	ret

000007e4 <strncpy>:
 7e4:	fb 01       	movw	r30, r22
 7e6:	dc 01       	movw	r26, r24
 7e8:	41 50       	subi	r20, 0x01	; 1
 7ea:	50 40       	sbci	r21, 0x00	; 0
 7ec:	48 f0       	brcs	.+18     	; 0x800 <strncpy+0x1c>
 7ee:	01 90       	ld	r0, Z+
 7f0:	0d 92       	st	X+, r0
 7f2:	00 20       	and	r0, r0
 7f4:	c9 f7       	brne	.-14     	; 0x7e8 <strncpy+0x4>
 7f6:	01 c0       	rjmp	.+2      	; 0x7fa <strncpy+0x16>
 7f8:	1d 92       	st	X+, r1
 7fa:	41 50       	subi	r20, 0x01	; 1
 7fc:	50 40       	sbci	r21, 0x00	; 0
 7fe:	e0 f7       	brcc	.-8      	; 0x7f8 <strncpy+0x14>
 800:	08 95       	ret

00000802 <strtok_r>:
 802:	fa 01       	movw	r30, r20
 804:	a1 91       	ld	r26, Z+
 806:	b0 81       	ld	r27, Z
 808:	00 97       	sbiw	r24, 0x00	; 0
 80a:	19 f4       	brne	.+6      	; 0x812 <strtok_r+0x10>
 80c:	10 97       	sbiw	r26, 0x00	; 0
 80e:	e1 f0       	breq	.+56     	; 0x848 <strtok_r+0x46>
 810:	cd 01       	movw	r24, r26
 812:	dc 01       	movw	r26, r24
 814:	cd 01       	movw	r24, r26
 816:	0d 90       	ld	r0, X+
 818:	00 20       	and	r0, r0
 81a:	11 f4       	brne	.+4      	; 0x820 <strtok_r+0x1e>
 81c:	c0 01       	movw	r24, r0
 81e:	13 c0       	rjmp	.+38     	; 0x846 <strtok_r+0x44>
 820:	fb 01       	movw	r30, r22
 822:	21 91       	ld	r18, Z+
 824:	22 23       	and	r18, r18
 826:	19 f0       	breq	.+6      	; 0x82e <strtok_r+0x2c>
 828:	20 15       	cp	r18, r0
 82a:	d9 f7       	brne	.-10     	; 0x822 <strtok_r+0x20>
 82c:	f3 cf       	rjmp	.-26     	; 0x814 <strtok_r+0x12>
 82e:	fb 01       	movw	r30, r22
 830:	21 91       	ld	r18, Z+
 832:	20 15       	cp	r18, r0
 834:	19 f4       	brne	.+6      	; 0x83c <strtok_r+0x3a>
 836:	1e 92       	st	-X, r1
 838:	11 96       	adiw	r26, 0x01	; 1
 83a:	06 c0       	rjmp	.+12     	; 0x848 <strtok_r+0x46>
 83c:	22 23       	and	r18, r18
 83e:	c1 f7       	brne	.-16     	; 0x830 <strtok_r+0x2e>
 840:	0d 90       	ld	r0, X+
 842:	00 20       	and	r0, r0
 844:	a1 f7       	brne	.-24     	; 0x82e <strtok_r+0x2c>
 846:	d0 01       	movw	r26, r0
 848:	fa 01       	movw	r30, r20
 84a:	a1 93       	st	Z+, r26
 84c:	b0 83       	st	Z, r27
 84e:	08 95       	ret

00000850 <__mulhi_const_10>:
 850:	7a e0       	ldi	r23, 0x0A	; 10
 852:	97 9f       	mul	r25, r23
 854:	90 2d       	mov	r25, r0
 856:	87 9f       	mul	r24, r23
 858:	80 2d       	mov	r24, r0
 85a:	91 0d       	add	r25, r1
 85c:	11 24       	eor	r1, r1
 85e:	08 95       	ret

00000860 <_exit>:
 860:	f8 94       	cli

00000862 <__stop_program>:
 862:	ff cf       	rjmp	.-2      	; 0x862 <__stop_program>
